[user]
    name = Damien Lecan
    email = dev@dlecan.com

[branch]
    autosetuprebase = always

[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto

[rerere]
    enabled = true

[merge]
    # Valable uniquemet a partir de Git 1.7.6
    ff = false

[diff]
    mnemonicprefix = true

[help]
    autocorrect = -1

[push]
    default = upstream

[rebase]
    autostash = true

[alias]
    co = checkout
    ci = commit
    cia = !git add -A && git commit
    br = branch
    df = diff
    st = status

    amend = commit --amend
    who = shortlog -s --
    changes = diff --name-status -r
    dic = diff --cached
    ds = diff --stat -r
    wdiff = diff --word-diff
    undo = !git reset --soft HEAD^
    unstage = reset HEAD --

    # Affiche le diff avant pull
    do = diff --name-status -r ORIG_HEAD HEAD

    # 2 logs avec visualisation des branches
    # Long
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    # Court
    oneline = log --pretty=oneline --abbrev-commit --graph --decorate
    # Long avec fichiers modifies
    lgf = log --name-status --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative
    # Long avec message de commit complet
    flg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative

    # Un 'status' concis
    s = "!git diff --name-status | sed -e 's/^/W /' ; git diff --cached --name-status | sed -e 's/^/C /'"

    emerge = merge --no-ff

    # ajouter les fichiers modifies.
    addm = !git-ls-files -m -z | xargs -0 git-add && git status

    # ajouter les fichiers inconnus.
    addu = !git-ls-files -o --exclude-standard -z | xargs -0 git-add && git status

    # supprimer les fichiers marques comme effaces.
    rmm = !git ls-files -d -z | xargs -0 git-rm && git status

    # Commandes SVN
    svnc = svn dcommit
    svnu = svn rebase
    
    # Init et update des submodules
    pup = "!git submodule init && git submodule update"

    # Pushs all submodules to origin master
    pushsub = submodule foreach "git push origin master"
     
    # Pull submodules from origin master
    pullsub = submodule foreach "git pull origin master"
